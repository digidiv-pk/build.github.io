{"version":3,"sources":["views/Users/ViewUser/components/General/components/UserForm/UserForm.js","views/Users/ViewUser/components/General/components/SellerInfoForm/SellerInfoForm.js","views/Users/ViewUser/components/General/components/SellerBankingForm/SellerBankingForm.js","views/Users/ViewUser/components/General/components/ViewUserForm/ViewUserForm.js","views/Users/ViewUser/components/General/General.js","views/Users/ViewUser/components/Header/Header.js","views/Users/ViewUser/ViewUser.js","views/Users/ViewUser/index.js","../node_modules/@material-ui/lab/esm/Skeleton/Skeleton.js"],"names":["UserForm","props","user","Fragment","CardHeader","title","CardContent","Grid","container","spacing","item","md","xs","TextField","fullWidth","InputProps","readOnly","label","name","value","firstName","variant","lastName","required","type","email","phoneNumber","SellerInfoForm","sellerInfo","getValue","key","sellerInfoFormFields","address_details","fields","locality","grid","input","placeholder","streetAddress","town","state","country","postalCode","OrdDetails","OrgName","EmployeeId","logo","legal_details","dotNumber","proLicence","insurancepolicy","region","SSN","DOB","Object","keys","map","sectionKey","section","Divider","fieldKey","field","SellerBankingForm","bankingDetails","sellerBankingDetailsFormFields","bankName","accountTitle","accountNumber","routingNumber","useStyles","makeStyles","theme","root","saveButton","color","palette","white","backgroundColor","colors","green","connect","users","get","loading","error","dispatch","onUpdateUser","actions","className","rest","classes","sellerInfoForm","sellerBankingDetails","Card","clsx","General","Header","Typography","component","gutterBottom","width","breakpoints","values","lg","maxWidth","margin","padding","tabs","marginTop","divider","grey","content","onUserDetail","userId","match","history","id","params","useEffect","push","pathUrls","listPath","Skeleton","data","Array","fill","height","general","forwardRef","ref","_props$component","Component","_props$disableAnimate","disableAnimate","_props$variant","other","createElement","animate","style","display","action","hover","text","marginBottom","borderRadius","shape","rect","circle","animation","opacity"],"mappings":"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","file":"static/js/35.cb5ca043.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  CardContent,\n  CardHeader,\n  Grid,\n  TextField\n} from '@material-ui/core'\n\nconst UserForm = (props) => {\n  const { user } = props\n  return (\n    <React.Fragment>\n      <CardHeader title=\"Create User\" />\n      <CardContent>\n        <Grid\n          container\n          spacing={4}\n        >\n          <Grid\n            item\n            md={6}\n            xs={12}\n          >\n            <TextField\n              fullWidth\n              InputProps={{\n                readOnly: true,\n              }}\n              label=\"First name\"\n              name=\"firstName\"\n              value={user.firstName}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid\n            item\n            md={6}\n            xs={12}\n          >\n            <TextField\n              fullWidth\n              InputProps={{\n                readOnly: true,\n              }}\n              label=\"Last name\"\n              name=\"lastName\"\n              value={user.lastName}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid\n            item\n            md={6}\n            xs={12}\n          >\n            <TextField\n              fullWidth\n              InputProps={{\n                readOnly: true,\n              }}\n              label=\"Email Address\"\n              name=\"email\"\n              required\n              type=\"email\"\n              value={user.email}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid\n            item\n            md={6}\n            xs={12}\n          >\n            <TextField\n              fullWidth\n              InputProps={{\n                readOnly: true,\n              }}\n              label=\"Phone Number\"\n              name=\"phoneNumber\"\n              required\n              type=\"text\"\n              value={user.phoneNumber}\n              variant=\"outlined\"\n            />\n          </Grid>\n        </Grid>\n      </CardContent>\n    </React.Fragment>\n  )\n}\n\nexport default UserForm\n","import React from 'react'\nimport {\n  CardContent,\n  CardHeader,\n  Grid,\n  TextField,\n  Divider\n} from '@material-ui/core'\n\nconst SellerInfoForm = (props) => {\n  const { sellerInfo } = props\n  const getValue = (key) => {\n    if (sellerInfo[key]) {\n      return sellerInfo[key]\n    } else {\n      return ''\n    }\n  }\n  const sellerInfoFormFields = {\n    address_details: {\n      name: 'Address Details',\n      fields: {\n        locality: {\n          grid: {\n            md: 12,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Locality',\n            name: 'locality',\n            value: getValue('locality')\n          }\n        },\n\n        streetAddress: {\n          grid: {\n            md: 12,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Street Address',\n            name: 'streetAddress',\n            value: getValue('streetAddress')\n          }\n\n        },\n        town: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Town',\n            name: 'town',\n            value: getValue('town')\n          }\n        },\n        state: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'State',\n            name: 'state',\n            value: getValue('state')\n          }\n        },\n        country: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Country',\n            name: 'country',\n            value: getValue('country')\n          }\n        },\n        postalCode: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Postal Code',\n            name: 'postalCode',\n            value: getValue('postalCode')\n          }\n        }\n      }\n    },\n    OrdDetails: {\n      name: 'Organization Details',\n      fields: {\n        OrgName: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Organization Name',\n            name: 'OrgName',\n            value: getValue('OrgName')\n          }\n        },\n        EmployeeId: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Employee Id',\n            name: 'EmployeeId',\n            value: getValue('EmployeeId')\n          }\n        },\n        logo: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Logo',\n            name: 'logo',\n            value: getValue('logo')\n          }\n        }\n      }\n    },\n    legal_details: {\n      name: 'Legal Details',\n      fields: {\n        dotNumber: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Dot Number',\n            name: 'dotNumber',\n            value: getValue('dotNumber')\n          }\n        },\n        proLicence: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Professional Licence',\n            name: 'proLicence',\n            value: getValue('proLicence')\n          }\n        },\n        insurancepolicy: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Insurance Policy',\n            name: 'insurancepolicy',\n            value: getValue('insurancepolicy')\n          }\n        },\n        region: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Region',\n            name: 'region',\n            value: getValue('region')\n          }\n        },\n        SSN: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'SSN',\n            name: 'SSN',\n            value: getValue('SSN')\n          }\n        },\n        DOB: {\n          grid: {\n            md: 6,\n            xs: 12\n          },\n          input: {\n            type: 'text',\n            placeholder: 'Date of Birth',\n            name: 'DOB',\n            value: getValue('DOB')\n          }\n        }\n      }\n    }\n\n  }\n  const getInputField = (grid, input) => {\n    return (\n      <Grid\n        item\n        md={grid.md}\n        xs={grid.xs}\n      >\n        <TextField\n          fullWidth\n          InputProps={{\n            readOnly: true,\n          }}\n          label={input.placeholder}\n          name={input.name}\n          type={input.type}\n          value={input.value}\n          variant=\"outlined\"\n        />\n      </Grid>\n    )\n  }\n\n  return (\n    <React.Fragment>\n      {Object.keys(sellerInfoFormFields).map(sectionKey => {\n        const section = sellerInfoFormFields[sectionKey]\n        const fields = section.fields\n        const name = section.name\n        return (\n          <React.Fragment>\n            <CardHeader title={name} />\n            <Divider />\n            <CardContent>\n              <Grid\n                container\n                spacing={4}\n              >\n                {Object.keys(fields).map(fieldKey => {\n                  const field = fields[fieldKey]\n                  return getInputField(field.grid, field.input)\n                })}\n              </Grid>\n            </CardContent>\n          </React.Fragment>\n        )\n      })}\n    </React.Fragment>\n  )\n}\n\nexport default SellerInfoForm\n","import React from 'react'\nimport { CardContent, CardHeader, Divider, Grid, TextField } from '@material-ui/core'\n\nconst SellerBankingForm = (props) => {\n  const { bankingDetails } = props\n  const getValue = (key) => {\n    if (bankingDetails) {\n      if (bankingDetails[key]) {\n        return bankingDetails[key]\n      } else {\n        return ''\n      }\n    } else {\n      return ''\n    }\n  }\n\n  const sellerBankingDetailsFormFields = {\n    bankName: {\n      type: 'text',\n      placeholder: 'Bank Name',\n      name: 'bankName',\n      value: getValue('bankName')\n    },\n    accountTitle: {\n      type: 'text',\n      placeholder: 'Account Title',\n      name: 'accountTitle',\n      value: getValue('accountTitle')\n    },\n    accountNumber: {\n      type: 'text',\n      placeholder: 'Account Number',\n      name: 'accountNumber',\n      value: getValue('accountNumber')\n    },\n    routingNumber: {\n      type: 'text',\n      placeholder: 'Routing Number',\n      name: 'routingNumber',\n      value: getValue('routingNumber')\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <CardHeader title=\"Banking Details\" />\n      <Divider />\n      <CardContent>\n        <Grid\n          container\n          spacing={4}\n        >\n          {Object.keys(sellerBankingDetailsFormFields).map(fieldKey => {\n            const field = sellerBankingDetailsFormFields[fieldKey]\n            return (\n              <Grid\n                item\n                md={6}\n                xs={12}\n              >\n                <TextField\n                  fullWidth\n                  InputProps={{\n                    readOnly: true,\n                  }}\n                  label={field.placeholder}\n                  name={field.name}\n                  type={field.type}\n                  value={field.value}\n                  variant=\"outlined\"\n                />\n              </Grid>\n            )\n          })}\n        </Grid>\n      </CardContent>\n\n    </React.Fragment>\n  )\n}\n\nexport default SellerBankingForm\n","import React from 'react'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Grid,\n  Divider,\n  TextField,\n  colors\n} from '@material-ui/core'\nimport UserForm from '../UserForm'\nimport SellerInfoForm from '../SellerInfoForm'\nimport SellerBankingForm from '../SellerBankingForm'\nimport * as actions from '../../../../../../../actions'\nimport { connect } from 'react-redux'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}))\n\nconst ViewUserForm = props => {\n  const { user, className, ...rest } = props\n\n  const classes = useStyles()\n  let sellerInfoForm = null\n\n  if (user.sellerInfo) {\n    const { sellerInfo } = user\n    const { sellerBankingDetails } = sellerInfo\n    sellerInfoForm = (\n      <React.Fragment>\n        <SellerInfoForm\n          sellerInfo={sellerInfo}\n        />\n        <SellerBankingForm\n          bankingDetails={sellerBankingDetails}\n        />\n      </React.Fragment>\n    )\n  }\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <form>\n        <CardHeader title=\"Profile\" />\n        <Divider />\n        <CardContent>\n          <Grid\n            container\n            spacing={4}\n          >\n            <UserForm user={user} />\n          </Grid>\n          {sellerInfoForm}\n        </CardContent>\n      </form>\n    </Card>\n  )\n}\n\nViewUserForm.propTypes = {\n  className: PropTypes.string\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.users.get.users[0],\n    loading: state.users.get.loading,\n    error: state.users.get.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUpdateUser: (user) => dispatch(actions.updateUserDetail(user))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewUserForm)\n","import React from 'react'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport { Grid } from '@material-ui/core'\nimport { ViewUserForm } from './components'\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}))\n\nconst General = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <Grid\n      {...rest}\n      className={clsx(classes.root, className)}\n      container\n      spacing={3}\n    >\n\n      <Grid\n        item\n      >\n        <ViewUserForm />\n      </Grid>\n    </Grid>\n  )\n}\n\nGeneral.propTypes = {\n  className: PropTypes.string\n}\n\nexport default General\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport { Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}))\n\nconst Header = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Typography\n        component=\"h2\"\n        gutterBottom\n        variant=\"overline\"\n      >\n        Admin Profile\n      </Typography>\n      <Typography\n        component=\"h1\"\n        variant=\"h3\"\n      >\n        {props.title}\n      </Typography>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Header\n","import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport { Divider, colors, CardHeader, CardContent, Grid } from '@material-ui/core'\n\nimport { pathUrls } from '../../../config'\n\nimport { Page } from 'components'\nimport {\n  Header,\n  General\n} from './components'\nimport * as actions from '../../../actions'\nimport { connect } from 'react-redux'\nimport { Skeleton } from '@material-ui/lab'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: theme.breakpoints.values.lg,\n    maxWidth: '100%',\n    margin: '0 auto',\n    padding: theme.spacing(3)\n  },\n  tabs: {\n    marginTop: theme.spacing(3)\n  },\n  divider: {\n    backgroundColor: colors.grey[300]\n  },\n  content: {\n    marginTop: theme.spacing(3)\n  }\n}))\n\nconst ViewUser = props => {\n  const { match, history } = props\n  const classes = useStyles()\n  const { id } = match.params\n\n  useEffect(() => {\n    props.onUserDetail(id)\n  }, [])\n\n  if (props.error) {\n    history.push(pathUrls.users.listPath)\n  }\n\n  const loading = () => {\n    const data = Array(4).fill(1).map((item) => {\n      return (\n        <Grid\n          item\n          md={6}\n          xs={12}\n        >\n          <Skeleton\n            height={50}\n            variant=\"rect\"\n          />\n        </Grid>\n      )\n    })\n    const skeleton = (Skeleton) => {\n      return (\n        <div>\n          <CardHeader title=\"Profile\" />\n          <Divider />\n          <CardContent >\n            <Grid\n              container\n              spacing={4}\n            >\n              {Skeleton}\n            </Grid>\n          </CardContent>\n        </div>\n      )\n    }\n    return skeleton(data)\n  }\n\n  const general = () => {\n    if (props.users) {\n      return (\n        <General user={props.users} />\n      )\n    }\n  }\n\n  const display = () => {\n    if (props.loading) {\n      return loading()\n    } else {\n      return general()\n    }\n  }\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Update Profile\"\n    >\n      <Header title=\"Update Profile\" />\n      <div className={classes.content}>\n        {display()}\n      </div>\n    </Page>\n  )\n}\n\nViewUser.propTypes = {\n  history: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => {\n  return {\n    users: state.users.get.users,\n    loading: state.users.get.loading,\n    error: state.users.get.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUserDetail: (userId) => dispatch(actions.getUserDetail(userId))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewUser)\n","export { default } from './ViewUser'\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      backgroundColor: theme.palette.action.hover,\n      height: '1.2em'\n    },\n\n    /* Styles applied to the root element if `variant=\"text\"`. */\n    text: {\n      marginTop: '0.8em',\n      marginBottom: '0.8em',\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"rect\"`. */\n    rect: {},\n\n    /* Styles applied to the root element if `variant=\"circle\"`. */\n    circle: {\n      borderRadius: '50%'\n    },\n\n    /* Styles applied to the root element if `disabledAnimate={false}`. */\n    animate: {\n      animation: '$animate 1.5s ease-in-out infinite'\n    },\n    '@keyframes animate': {\n      '0%': {\n        opacity: 1\n      },\n      '50%': {\n        opacity: 0.4\n      },\n      '100%': {\n        opacity: 1\n      }\n    }\n  };\n};\nvar Skeleton = React.forwardRef(function Skeleton(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableAnimate = props.disableAnimate,\n      disableAnimate = _props$disableAnimate === void 0 ? false : _props$disableAnimate,\n      height = props.height,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'text' : _props$variant,\n      width = props.width,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disableAnimate\", \"height\", \"variant\", \"width\"]);\n\n  return React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, classes[variant], className, !disableAnimate && classes.animate)\n  }, other, {\n    style: _extends({\n      width: width,\n      height: height\n    }, other.style)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Skeleton.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true` the animation effect is disabled.\n   */\n  disableAnimate: PropTypes.bool,\n\n  /**\n   * Height of the skeleton.\n   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The type of content that will be rendered.\n   */\n  variant: PropTypes.oneOf(['text', 'rect', 'circle']),\n\n  /**\n   * Width of the skeleton.\n   * Useful when the skeleton is inside an inline element with no width of its own.\n   */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiSkeleton'\n})(Skeleton);"],"sourceRoot":""}