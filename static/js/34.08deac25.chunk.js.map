{"version":3,"sources":["views/Users/UpdateUser/components/General/components/GeneralSettings/GeneralSettings.js","views/Users/UpdateUser/components/General/General.js","views/Users/UpdateUser/components/Header/Header.js","views/Users/UpdateUser/UpdateUser.js","views/Users/UpdateUser/index.js","../node_modules/@material-ui/lab/esm/Skeleton/Skeleton.js"],"names":["useStyles","makeStyles","theme","root","saveButton","color","palette","white","backgroundColor","colors","green","connect","state","users","get","loading","error","update","dispatch","onUpdateUser","user","actions","props","className","rest","classes","useState","values","setValues","handleChange","event","persist","target","name","type","checked","value","success","LinearProgress","Alert","message","errorMessage","variant","successMessage","Card","clsx","onSubmit","preventDefault","formdata","id","firstName","lastName","CardHeader","title","Divider","CardContent","Grid","container","spacing","item","md","xs","TextField","disabled","fullWidth","helperText","label","onChange","required","email","phoneNumber","CardActions","Button","General","profile","Header","Typography","component","gutterBottom","width","breakpoints","lg","maxWidth","margin","padding","tabs","marginTop","divider","grey","content","onUserDetail","userId","match","history","params","useEffect","push","pathUrls","listPath","Skeleton","data","Array","fill","map","height","general","forwardRef","ref","_props$component","Component","_props$disableAnimate","disableAnimate","_props$variant","other","createElement","animate","style","display","action","hover","text","marginBottom","borderRadius","shape","rect","circle","animation","opacity"],"mappings":"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","file":"static/js/34.08deac25.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Grid,\n  Divider,\n  TextField,\n  colors,\n  LinearProgress\n} from '@material-ui/core'\n\nimport * as actions from '../../../../../../../actions'\nimport Alert from '../../../../../../../components/Alert'\nimport { connect } from 'react-redux'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}))\n\nconst GeneralSettings = props => {\n  const { users, className, ...rest } = props\n\n  const classes = useStyles()\n  const [values, setValues] = useState({ ...users[0] })\n\n  const handleChange = event => {\n    event.persist()\n\n    setValues({\n      ...values,\n      [event.target.name]:\n        event.target.type === 'checkbox'\n          ? event.target.checked\n          : event.target.value\n    })\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    const formdata = {\n      id: values.id,\n      firstName: values.firstName,\n      lastName: values.lastName\n    }\n    props.onUpdateUser(formdata)\n  }\n\n  let loading = null\n  let error = null\n  let success = null\n  if (props.update.loading) {\n    loading = <LinearProgress />\n  }\n  if (props.update.error) {\n    error = <Alert\n      message={props.update.errorMessage}\n      variant=\"error\"\n            />\n  }\n  if (props.update.success) {\n    success = <Alert\n      message={props.update.successMessage}\n      variant=\"success\"\n              />\n  }\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <form onSubmit={handleSubmit}>\n        <CardHeader title=\"Profile\" />\n        <Divider />\n        {loading}\n        {error}\n        {success}\n        <CardContent>\n          <Grid\n            container\n            spacing={4}\n          >\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                disabled={props.update.loading}\n                fullWidth\n                helperText=\"Please specify the first name\"\n                label=\"First name\"\n                name=\"firstName\"\n                onChange={handleChange}\n                required\n                value={values.firstName}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                disabled={props.update.loading}\n                fullWidth\n                label=\"Last name\"\n                name=\"lastName\"\n                onChange={handleChange}\n                required\n                value={values.lastName}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                disabled\n                fullWidth\n                label=\"Email Address\"\n                name=\"email\"\n                onChange={handleChange}\n                required\n                value={values.email}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                disabled\n                fullWidth\n                label=\"Phone Number\"\n                name=\"phoneNumber\"\n                onChange={handleChange}\n                type=\"text\"\n                value={values.phoneNumber}\n                variant=\"outlined\"\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardActions>\n          <Button\n            className={classes.saveButton}\n            type=\"submit\"\n            variant=\"contained\"\n          >\n            Save Changes\n          </Button>\n        </CardActions>\n      </form>\n    </Card>\n  )\n}\n\nGeneralSettings.propTypes = {\n  className: PropTypes.string,\n  profile: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => {\n  return {\n    users: state.users.get.users,\n    loading: state.users.get.loading,\n    error: state.users.get.error,\n    update: state.users.update\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUpdateUser: (user) => dispatch(actions.updateUserDetail(user))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralSettings)\n","import React, { useState, useEffect } from 'react'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport { Grid } from '@material-ui/core'\nimport { GeneralSettings } from './components'\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}))\n\nconst General = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <Grid\n      {...rest}\n      className={clsx(classes.root, className)}\n      container\n      spacing={3}\n    >\n\n      <Grid\n        item\n      >\n        <GeneralSettings profile={props.user} />\n      </Grid>\n    </Grid>\n  )\n}\n\nGeneral.propTypes = {\n  className: PropTypes.string\n}\n\nexport default General\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport { Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}))\n\nconst Header = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Typography\n        component=\"h2\"\n        gutterBottom\n        variant=\"overline\"\n      >\n        Admin Profile\n      </Typography>\n      <Typography\n        component=\"h1\"\n        variant=\"h3\"\n      >\n        {props.title}\n      </Typography>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Header\n","import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport { Divider, colors, CardHeader, CardContent, Grid } from '@material-ui/core'\n\nimport { pathUrls } from '../../../config'\n\nimport { Page } from 'components'\nimport {\n  Header,\n  General\n} from './components'\nimport * as actions from '../../../actions'\nimport { connect } from 'react-redux'\nimport { Skeleton } from '@material-ui/lab'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: theme.breakpoints.values.lg,\n    maxWidth: '100%',\n    margin: '0 auto',\n    padding: theme.spacing(3)\n  },\n  tabs: {\n    marginTop: theme.spacing(3)\n  },\n  divider: {\n    backgroundColor: colors.grey[300]\n  },\n  content: {\n    marginTop: theme.spacing(3)\n  }\n}))\n\nconst UpdateUser = props => {\n  const { match, history } = props\n  const classes = useStyles()\n  const { id } = match.params\n\n  useEffect(() => {\n    props.onUserDetail(id)\n  }, [])\n\n  if (props.error) {\n    history.push(pathUrls.users.listPath)\n  }\n\n  const loading = () => {\n    const data = Array(4).fill(1).map((item) => {\n      return (\n        <Grid\n          item\n          md={6}\n          xs={12}\n        >\n          <Skeleton\n            height={50}\n            variant=\"rect\"\n          />\n        </Grid>\n      )\n    })\n    const skeleton = (Skeleton) => {\n      return (\n        <div>\n          <CardHeader title=\"Profile\" />\n          <Divider />\n          <CardContent >\n            <Grid\n              container\n              spacing={4}\n            >\n              {Skeleton}\n            </Grid>\n          </CardContent>\n        </div>\n      )\n    }\n    return skeleton(data)\n  }\n\n  const general = () => {\n    if (props.users) {\n      return (\n        <General user={props.users} />\n      )\n    }\n  }\n\n  const display = () => {\n    if (props.loading) {\n      return loading()\n    } else {\n      return general()\n    }\n  }\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Update Profile\"\n    >\n      <Header title=\"Update Profile\" />\n      <div className={classes.content}>\n        {display()}\n      </div>\n    </Page>\n  )\n}\n\nUpdateUser.propTypes = {\n  history: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => {\n  return {\n    users: state.users.get.users,\n    loading: state.users.get.loading,\n    error: state.users.get.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUserDetail: (userId) => dispatch(actions.getUserDetail(userId))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateUser)\n","export { default } from './UpdateUser'\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'block',\n      backgroundColor: theme.palette.action.hover,\n      height: '1.2em'\n    },\n\n    /* Styles applied to the root element if `variant=\"text\"`. */\n    text: {\n      marginTop: '0.8em',\n      marginBottom: '0.8em',\n      borderRadius: theme.shape.borderRadius\n    },\n\n    /* Styles applied to the root element if `variant=\"rect\"`. */\n    rect: {},\n\n    /* Styles applied to the root element if `variant=\"circle\"`. */\n    circle: {\n      borderRadius: '50%'\n    },\n\n    /* Styles applied to the root element if `disabledAnimate={false}`. */\n    animate: {\n      animation: '$animate 1.5s ease-in-out infinite'\n    },\n    '@keyframes animate': {\n      '0%': {\n        opacity: 1\n      },\n      '50%': {\n        opacity: 0.4\n      },\n      '100%': {\n        opacity: 1\n      }\n    }\n  };\n};\nvar Skeleton = React.forwardRef(function Skeleton(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disableAnimate = props.disableAnimate,\n      disableAnimate = _props$disableAnimate === void 0 ? false : _props$disableAnimate,\n      height = props.height,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'text' : _props$variant,\n      width = props.width,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disableAnimate\", \"height\", \"variant\", \"width\"]);\n\n  return React.createElement(Component, _extends({\n    ref: ref,\n    className: clsx(classes.root, classes[variant], className, !disableAnimate && classes.animate)\n  }, other, {\n    style: _extends({\n      width: width,\n      height: height\n    }, other.style)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Skeleton.propTypes = {\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true` the animation effect is disabled.\n   */\n  disableAnimate: PropTypes.bool,\n\n  /**\n   * Height of the skeleton.\n   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.\n   */\n  height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n\n  /**\n   * The type of content that will be rendered.\n   */\n  variant: PropTypes.oneOf(['text', 'rect', 'circle']),\n\n  /**\n   * Width of the skeleton.\n   * Useful when the skeleton is inside an inline element with no width of its own.\n   */\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiSkeleton'\n})(Skeleton);"],"sourceRoot":""}