{"version":3,"sources":["views/Brokerage/BrokerageDetails/components/Header/Header.js","views/Brokerage/BrokerageDetails/components/Summary/components/UserInfo/UserInfo.js","views/Brokerage/BrokerageDetails/components/Summary/components/VehicleDetails/VehicleDetails.js","views/Brokerage/BrokerageDetails/components/Summary/Summary.js","views/Brokerage/BrokerageDetails/components/Summary/components/SendEmails/SendEmails.js","views/Brokerage/BrokerageDetails/components/Summary/components/OtherActions/OtherActions.js","views/Brokerage/BrokerageDetails/components/Invoices/Invoices.js","views/Brokerage/BrokerageDetails/components/Logs/Logs.js","views/Brokerage/BrokerageDetails/BrokerageDetails.js","views/Brokerage/BrokerageDetails/index.js","views/Brokerage/utils/BrokerageAPI.js","views/Brokerage/utils/index.js"],"names":["useStyles","makeStyles","root","Header","props","className","rest","classes","clsx","Typography","component","gutterBottom","variant","theme","content","padding","actions","flexDirection","alignItems","marginLeft","buttonIcon","marginRight","spacing","allignCenter","textAlign","marginTop","UserInfo","user","statics","title","history","Card","CardHeader","Divider","CardContent","Table","TableBody","TableRow","TableCell","firstName","lastname","selected","phoneNumber","console","log","Box","borderColor","mb","Rating","readOnly","value","rating","getStatics","CardActions","Button","onClick","push","pathUrls","users","viewPath","replace","userId","valuesTitle","textTransform","VehicleDetails","vehicle","category","make","color","condition","number","year","status","sendButton","mailIcon","table","cell","mainActions","display","notice","deleteButton","palette","white","backgroundColor","error","main","dark","Summary","state","Grid","container","item","lg","md","xl","xs","brokerage","buyerVehicle","buyerInfo","buyerStatics","hasOwnProperty","buyer","ratingStatics","getBuyer","sellerInfo","sellerStatics","seller","getSeller","inner","minWidth","methodCell","width","statusCell","tabs","divider","colors","grey","connect","auth","session","authentication","match","id","params","useState","setState","useEffect","getBrokerage","headers","success","response","err","Brokerage","config","Promise","all","axios","method","apiUrls","count","url","get","offset","limit","skip","then","list","data","pages","Math","ceil","catch","options","get_by_id","getAbsoluteUrl"],"mappings":"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","file":"static/js/33.b976a8c1.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport { Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}))\n\nconst Header = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  const brokerage = {\n    name: 'Brokerage Detail'\n  }\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Typography\n        component=\"h2\"\n        gutterBottom\n        variant=\"overline\"\n      >\n        Brokerage\n      </Typography>\n      <Typography\n        component=\"h1\"\n        variant=\"h3\"\n      >\n        {brokerage.name}\n      </Typography>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Header\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport Rating from '@material-ui/lab/Rating';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Button,\n  Divider,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  Typography,\n  colors,\n  Box, Link\n} from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit'\nimport { get } from 'immutable';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { pathUrls } from '../../../../../../../config';\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  actions: {\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    '& > * + *': {\n      marginLeft: 0\n    }\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1)\n  },\n  allignCenter: {\n    textAlign: 'center',\n    marginTop: '15px'\n  }\n}))\n\nconst UserInfo = props => {\n  const { user, statics, title, history,  className, ...rest } = props\n\n  const handlerClick = ()=>{\n    history.push(pathUrls.users.viewPath.replace(':id', user.userId))\n  }\n  const classes = useStyles()\n\n  const getStatics = ()=>{\n    console.log(props)\n    if(statics){\n      return (\n        <div className={classes.allignCenter}>\n          <Box\n            borderColor=\"transparent\"\n            component=\"fieldset\"\n            mb={3}\n          >\n            <Typography component=\"legend\">User Rating</Typography>\n            <Rating\n              readOnly\n              value={statics.rating}\n            />\n          </Box>\n        </div>\n      )\n    }\n  }\n\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title={title} />\n      <Divider />\n      <CardContent className={classes.content}>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Name</TableCell>\n              <TableCell>\n                {user.firstName} {user.lastname}\n              </TableCell>\n            </TableRow>\n            <TableRow selected>\n              <TableCell>Phone</TableCell>\n              <TableCell>{user.phoneNumber}</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n        {getStatics()}\n      </CardContent>\n      <CardActions className={classes.actions}>\n        <Button\n          onClick={handlerClick}\n        >\n          <EditIcon className={classes.buttonIcon} />\n          View\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n\nUserInfo.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.object.isRequired\n}\n\nexport default UserInfo\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  colors\n} from '@material-ui/core'\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  valuesTitle: {\n    textTransform: 'capitalize'\n  }\n}))\n\nconst VehicleDetails = props => {\n  const { vehicle, className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Buyer Vehicle\" />\n      <Divider />\n      <CardContent className={classes.content}>\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell>Category</TableCell>\n              <TableCell>\n                <div className={classes.valuesTitle}>\n                  {vehicle.category}\n                </div>\n              </TableCell>\n            </TableRow>\n            <TableRow selected>\n              <TableCell>Make</TableCell>\n              <TableCell>\n                <div className={classes.valuesTitle}>\n                  {vehicle.make}\n                </div>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Color</TableCell>\n              <TableCell>\n                <div className={classes.valuesTitle}>\n                  {vehicle.color}\n                </div>\n              </TableCell>\n            </TableRow>\n            <TableRow selected>\n              <TableCell>Condition</TableCell>\n              <TableCell>\n                <div className={classes.valuesTitle}>\n                  {vehicle.condition}\n                </div>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Number</TableCell>\n              <TableCell>\n                <div className={classes.valuesTitle}>\n                  {vehicle.number}\n                </div>\n              </TableCell>\n            </TableRow>\n            <TableRow selected>\n              <TableCell>Year</TableCell>\n              <TableCell>\n                <div className={classes.valuesTitle}>\n                  {vehicle.year}\n                </div>\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell>Status</TableCell>\n              <TableCell>\n                <div className={classes.valuesTitle}>\n                  {vehicle.status}\n                </div>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  )\n}\n\nVehicleDetails.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.object.isRequired\n}\n\nexport default VehicleDetails\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport { Grid } from '@material-ui/core'\n\nimport axios from 'utils/axios'\nimport { UserInfo, VehicleDetails, SendEmails, OtherActions } from './components'\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}))\n\nconst Summary = props => {\n  const { className, history,  state, ...rest } = props\n\n  const classes = useStyles()\n\n  const getBuyer = () => {\n    let buyerInfo = null\n    let buyerStatics = null\n    if(state.brokerage.hasOwnProperty('buyer')){\n      buyerInfo = state.brokerage.buyer\n    }\n    if(state.brokerage.hasOwnProperty('ratingStatics')){\n      if(state.brokerage.ratingStatics.hasOwnProperty('buyerStatics')){\n        buyerStatics = state.brokerage.ratingStatics.buyerStatics\n      }\n    }\n\n    return (\n      <Grid\n        item\n        lg={4}\n        md={6}\n        xl={3}\n        xs={12}\n      >\n        <UserInfo\n          history={history}\n          statics={buyerStatics}\n          title={'Buyer Info'}\n          user={buyerInfo}\n        />\n      </Grid>\n    )\n\n  }\n  const getSeller = () => {\n    let sellerInfo = null\n    let sellerStatics = null\n    if(state.brokerage.hasOwnProperty('seller')){\n      sellerInfo = state.brokerage.seller\n    }\n    if(state.brokerage.hasOwnProperty('ratingStatics')){\n      if(state.brokerage.ratingStatics.hasOwnProperty('sellerStatics')){\n        sellerStatics = state.brokerage.ratingStatics.sellerStatics\n      }\n    }\n\n    return (\n      <Grid\n        item\n        lg={4}\n        md={6}\n        xl={3}\n        xs={12}\n      >\n        <UserInfo\n          history={history}\n          statics={sellerStatics}\n          title={'Seller Info'}\n          user={sellerInfo}\n        />\n      </Grid>\n    )\n\n  }\n\n  return (\n    <Grid\n      {...rest}\n      className={clsx(classes.root, className)}\n      container\n      spacing={3}\n    >\n      <Grid\n        item\n        lg={4}\n        md={6}\n        xl={3}\n        xs={12}\n      >\n        <VehicleDetails vehicle={state.brokerage.buyerVehicle} />\n      </Grid>\n      {getBuyer()}\n      {getSeller()}\n      {/*<Grid*/}\n      {/*  item*/}\n      {/*  lg={4}*/}\n      {/*  md={6}*/}\n      {/*  xl={3}*/}\n      {/*  xs={12}*/}\n      {/*>*/}\n      {/*  <SendEmails customer={customer} />*/}\n      {/*</Grid>*/}\n      {/*<Grid*/}\n      {/*  item*/}\n      {/*  lg={4}*/}\n      {/*  md={6}*/}\n      {/*  xl={3}*/}\n      {/*  xs={12}*/}\n      {/*>*/}\n      {/*  <OtherActions />*/}\n      {/*</Grid>*/}\n    </Grid>\n  )\n}\n\nSummary.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Summary\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport moment from 'moment'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  TextField,\n  Button,\n  Divider,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell\n} from '@material-ui/core'\nimport MaiIcon from '@material-ui/icons/MailOutline'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {},\n  sendButton: {\n    marginTop: theme.spacing(2)\n  },\n  mailIcon: {\n    marginRight: theme.spacing(1)\n  },\n  table: {\n    marginTop: theme.spacing(2)\n  },\n  cell: {\n    padding: theme.spacing(1)\n  }\n}))\nconst SendEmails = props => {\n  const { customer, className, ...rest } = props\n\n  const classes = useStyles()\n\n  const options = [\n    'Resend last invoice',\n    'Send password reset',\n    'Send verification'\n  ]\n\n  const [option, setOption] = useState(options[0])\n\n  const handleChange = event => {\n    event.persist()\n\n    setOption(event.target.value)\n  }\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Send emails\" />\n      <Divider />\n      <CardContent className={classes.content}>\n        <TextField\n          fullWidth\n          name=\"option\"\n          onChange={handleChange}\n          select\n          // eslint-disable-next-line react/jsx-sort-props\n          SelectProps={{ native: true }}\n          value={option}\n          variant=\"outlined\"\n        >\n          {options.map(option => (\n            <option\n              key={option}\n              value={option}\n            >\n              {option}\n            </option>\n          ))}\n        </TextField>\n        <Button\n          className={classes.sendButton}\n          variant=\"contained\"\n        >\n          <MaiIcon className={classes.mailIcon} />\n          Send email\n        </Button>\n        <Table className={classes.table}>\n          <TableBody>\n            {customer.emails.map(email => (\n              <TableRow key={email.id}>\n                <TableCell className={classes.cell}>\n                  {moment(email.created_at).format('DD/MM/YYYY | HH:MM')}\n                </TableCell>\n                <TableCell className={classes.cell}>\n                  {email.description}\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </CardContent>\n    </Card>\n  )\n}\n\nSendEmails.propTypes = {\n  className: PropTypes.string,\n  customer: PropTypes.object.isRequired\n}\n\nexport default SendEmails\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Button,\n  Divider,\n  Typography\n} from '@material-ui/core'\nimport NotInterestedIcon from '@material-ui/icons/NotInterested'\nimport GetAppIcon from '@material-ui/icons/GetApp'\nimport DeleteIcon from '@material-ui/icons/DeleteOutline'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  mainActions: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start'\n  },\n  notice: {\n    marginTop: theme.spacing(1)\n  },\n  deleteButton: {\n    marginTop: theme.spacing(1),\n    color: theme.palette.white,\n    backgroundColor: theme.palette.error.main,\n    '&:hover': {\n      backgroundColor: theme.palette.error.dark\n    }\n  },\n  buttonIcon: {\n    marginRight: theme.spacing(1)\n  }\n}))\nconst OtherActions = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Other actions\" />\n      <Divider />\n      <CardContent>\n        <div className={classes.mainActions}>\n          <Button>\n            <NotInterestedIcon className={classes.buttonIcon} />\n            Close Customer Account\n          </Button>\n          <Button>\n            <GetAppIcon className={classes.buttonIcon} />\n            Export client data\n          </Button>\n        </div>\n        <Typography\n          className={classes.notice}\n          variant=\"body2\"\n        >\n          Remove this this customer’s data if he requested that, if not please\n          be aware that what has been deleted can never brough back\n        </Typography>\n        <Button className={classes.deleteButton}>\n          <DeleteIcon className={classes.buttonIcon} />\n          Delete Customer Account\n        </Button>\n      </CardContent>\n    </Card>\n  )\n}\n\nOtherActions.propTypes = {\n  className: PropTypes.string\n}\n\nexport default OtherActions\n","import React, { useState, useEffect } from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\nimport clsx from 'clsx'\nimport moment from 'moment'\nimport PropTypes from 'prop-types'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardContent,\n  Divider,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  colors\n} from '@material-ui/core'\n\nimport axios from 'utils/axios'\nimport { Label, GenericMoreButton } from 'components'\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1150\n  }\n}))\n\nconst Invoices = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n  const [invoices, setInvoices] = useState([])\n\n  useEffect(() => {\n    let mounted = true\n\n    const fetchInvoices = () => {\n      axios.get('/api/management/customers/1/invoices').then(response => {\n        if (mounted) {\n          setInvoices(response.data.invoices)\n        }\n      })\n    }\n\n    fetchInvoices()\n\n    return () => {\n      mounted = false\n    }\n  }, [])\n\n  const statusColors = {\n    pending: colors.orange[600],\n    paid: colors.green[600],\n    rejected: colors.red[600]\n  }\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Card>\n        <CardHeader\n          action={<GenericMoreButton />}\n          title=\"Customer invoices\"\n        />\n        <Divider />\n        <CardContent className={classes.content}>\n          <PerfectScrollbar>\n            <div className={classes.inner}>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>ID</TableCell>\n                    <TableCell>Date</TableCell>\n                    <TableCell>Description</TableCell>\n                    <TableCell>Payment Method</TableCell>\n                    <TableCell>Total</TableCell>\n                    <TableCell>Status</TableCell>\n                    <TableCell align=\"right\">Actions</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {invoices.map(invoice => (\n                    <TableRow key={invoice.id}>\n                      <TableCell>#{invoice.id.split('-').shift()}</TableCell>\n                      <TableCell>\n                        {moment(invoice.date).format('DD/MM/YYYY | HH:MM')}\n                      </TableCell>\n                      <TableCell>{invoice.description}</TableCell>\n                      <TableCell>{invoice.paymentMethod}</TableCell>\n                      <TableCell>\n                        {invoice.currency}\n                        {invoice.value}\n                      </TableCell>\n                      <TableCell>\n                        <Label\n                          color={statusColors[invoice.status]}\n                          variant=\"outlined\"\n                        >\n                          {invoice.status}\n                        </Label>\n                      </TableCell>\n                      <TableCell align=\"right\">\n                        <Button\n                          color=\"primary\"\n                          component={RouterLink}\n                          size=\"small\"\n                          to={'/management/invoices/1'}\n                          variant=\"outlined\"\n                        >\n                          View\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </PerfectScrollbar>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nInvoices.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Invoices\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport moment from 'moment'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Divider,\n  Typography,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  colors\n} from '@material-ui/core'\n\nimport axios from 'utils/axios'\nimport { Label } from 'components'\n\nconst useStyles = makeStyles(() => ({\n  root: {},\n  content: {\n    padding: 0\n  },\n  inner: {\n    minWidth: 1150\n  },\n  methodCell: {\n    width: 100\n  },\n  statusCell: {\n    width: 64\n  }\n}))\n\nconst Logs = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  const [logs, setLogs] = useState([])\n\n  useEffect(() => {\n    let mounted = true\n\n    const fetchLogs = () => {\n      axios.get('/api/management/customers/1/logs').then(response => {\n        if (mounted) {\n          setLogs(response.data.logs)\n        }\n      })\n    }\n\n    fetchLogs()\n\n    return () => {\n      mounted = false\n    }\n  }, [])\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Card>\n        <CardHeader title=\"Customer logs\" />\n        <Divider />\n        <CardContent className={classes.content}>\n          <PerfectScrollbar options={{ suppressScrollY: true }}>\n            <div className={classes.inner}>\n              <Table>\n                <TableBody>\n                  {logs.map(log => (\n                    <TableRow key={log.id}>\n                      <TableCell className={classes.methodCell}>\n                        <Typography variant=\"h6\">{log.method}</Typography>\n                      </TableCell>\n                      <TableCell className={classes.statusCell}>\n                        <Label\n                          color={\n                            log.status === 200\n                              ? colors.green[600]\n                              : colors.red[600]\n                          }\n                        >\n                          {log.status}\n                        </Label>\n                      </TableCell>\n                      <TableCell>{log.route}</TableCell>\n                      <TableCell>{log.desc}</TableCell>\n                      <TableCell align=\"right\">{log.IP}</TableCell>\n                      <TableCell align=\"right\">\n                        {moment(log.created_at).format('YYYY/MM/DD | hh:mm:ss')}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </PerfectScrollbar>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\nLogs.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Logs\n","import React, { useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/styles';\nimport { Divider, colors } from '@material-ui/core';\n\nimport { Page } from 'components';\nimport { Header, Summary } from './components';\nimport { connect } from 'react-redux';\nimport { brokerage } from '../utils';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3)\n  },\n  tabs: {\n    marginTop: theme.spacing(3)\n  },\n  divider: {\n    backgroundColor: colors.grey[300]\n  },\n  content: {\n    marginTop: theme.spacing(3)\n  }\n}));\n\nconst BrokerageDetails = props => {\n  const { match, history } = props;\n  const classes = useStyles();\n  const { id } = match.params;\n  const [state, setState] = useState({\n    brokerage:null\n  })\n  useEffect(() => {\n    brokerage.getBrokerage({\n      id:id,\n      headers: props.auth.headers,\n      success: (response)=>{setState({\n        brokerage: response\n      })},\n      error: (err)=>{console.log(err)}\n    })\n  }, []);\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Customer Management Details\"\n    >\n      <Header />\n\n      <Divider className={classes.divider} />\n      <div className={classes.content}>\n        {!!state.brokerage && (<Summary\n          history={history}\n          state={state}\n        />)}\n      </div>\n    </Page>\n  );\n};\n\nBrokerageDetails.propTypes = {\n  history: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    auth: state.session.authentication\n  };\n};\n\nexport default connect(mapStateToProps)(BrokerageDetails);\n","export { default } from './BrokerageDetails';\n","import { axios, apiUrls } from 'config';\n\nexport class Brokerage {\n  static getBrokerageList(config){\n    console.log(config)\n    const { state, setState, headers } = config;\n    Promise.all([\n      axios({\n        method: apiUrls.brokerage.count.method,\n        url: apiUrls.brokerage.count.url,\n        headers: headers\n      }),\n      axios({\n        method: apiUrls.brokerage.get.method,\n        url: apiUrls.brokerage.get.url,\n        params: {\n          offset: state.offset,\n          limit: state.limit,\n          skip: state.offset\n        },\n        headers: {\n          ...headers\n        }\n      })\n    ])\n      .then(([count, list]) => {\n        setState({\n          count: count.data.count,\n          brokerage: list.data,\n          pages: Math.ceil(count.data.count / state.limit)\n        });\n        console.log(count.data.count, list.data);\n      })\n      .catch((error) => {\n        console.log(error.response);\n      });\n  }\n\n  static getBrokerage(config){\n    const { id, headers, success, error } = config;\n    const options = {\n      method: apiUrls.brokerage.get_by_id.method,\n      url: apiUrls.brokerage.get_by_id.getAbsoluteUrl(id),\n      headers: headers\n    };\n    axios(options)\n      .then(response => {\n        console.log('Success', response.data);\n        success(response.data);\n      })\n      .catch(err => {\n        error(err);\n        console.log('Error', err.response, err);\n      });\n  }\n}\n","export { Brokerage as brokerage } from './BrokerageAPI'\n"],"sourceRoot":""}