{"version":3,"sources":["views/Users/User/components/General/components/ProfileDetails/ProfileDetails.js","views/Users/User/components/General/components/GeneralSettings/GeneralSettings.js","views/Users/User/components/General/General.js","views/Users/User/components/Header/Header.js","views/Users/User/components/Notifications/Notifications.js","views/Users/User/components/Security/Security.js","views/Users/User/User.js","views/Users/User/components/Subscription/Subscription.js","views/Users/User/index.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBoxOutlineBlank.js","../node_modules/@material-ui/core/esm/internal/svg-icons/CheckBox.js","../node_modules/@material-ui/core/esm/internal/svg-icons/IndeterminateCheckBox.js","../node_modules/@material-ui/core/esm/Checkbox/Checkbox.js"],"names":["makeStyles","theme","root","content","display","alignItems","flexDirection","textAlgin","name","marginTop","spacing","avatar","height","width","removeBotton","useStyles","saveButton","color","palette","white","backgroundColor","colors","green","connect","state","user","session","response","update","dispatch","onUpdateUser","firstName","lastName","actions","props","className","rest","classes","useState","values","setValues","handleChange","event","persist","target","type","checked","value","loading","button","LinearProgress","Button","variant","responseMessage","error","Alert","message","errorMessage","success","successMessage","Card","clsx","onSubmit","preventDefault","CardHeader","title","Divider","CardContent","Grid","container","item","md","xs","TextField","disabled","fullWidth","helperText","label","onChange","required","email","phoneNumber","CardActions","General","Header","Typography","component","gutterBottom","Security","password","confirm","valid","sm","action","marginRight","overview","flexWrap","justifyContent","breakpoints","down","product","productImage","details","notice","lg","maxWidth","margin","padding","tabs","divider","grey","User","match","history","tab","params","find","t","Tabs","push","scrollButtons","map","Tab","key","to","createSvgIcon","createElement","d","defaultCheckedIcon","CheckBox","defaultIcon","CheckBoxOutlineBlank","defaultIndeterminateIcon","IndeterminateCheckBox","forwardRef","ref","_props$checkedIcon","checkedIcon","_props$color","_props$icon","icon","_props$indeterminate","indeterminate","_props$indeterminateI","indeterminateIcon","inputProps","other","SwitchBase","concat","capitalize","withStyles","text","secondary","colorPrimary","primary","main","hoverOpacity","colorSecondary"],"mappings":"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","file":"static/js/10.cbc993a7.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Avatar,\n  Typography,\n  Button\n} from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    textAlgin: 'center'\n  },\n  name: {\n    marginTop: theme.spacing(1)\n  },\n  avatar: {\n    height: 100,\n    width: 100\n  },\n  removeBotton: {\n    width: '100%'\n  }\n}))\n\nconst ProfileDetails = props => {\n  const { profile, className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardContent className={classes.content}>\n        <Avatar\n          className={classes.avatar}\n          src={profile.avatar}\n        />\n        <Typography\n          className={classes.name}\n          gutterBottom\n          variant=\"h3\"\n        >\n          {profile.firstName} {profile.lastName}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          variant=\"body1\"\n        >\n          {profile.state}, {profile.country}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          variant=\"body2\"\n        >\n          {profile.timezone}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          className={classes.removeBotton}\n          variant=\"text\"\n        >\n          Remove picture\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n\nProfileDetails.propTypes = {\n  className: PropTypes.string,\n  profile: PropTypes.object.isRequired\n}\n\nexport default ProfileDetails\n","import React, { useState } from 'react'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Grid,\n  Divider,\n  TextField,\n  colors,\n  LinearProgress\n} from '@material-ui/core'\n\nimport Alert from 'components/Alert'\nimport * as actions from '../../../../../../../actions'\nimport { connect } from 'react-redux'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}))\n\nconst GeneralSettings = props => {\n  const { user, className, ...rest } = props\n\n  const classes = useStyles()\n  const [values, setValues] = useState({\n    ...user\n  })\n\n  const handleChange = event => {\n    event.persist()\n\n    setValues({\n      ...values,\n      [event.target.name]:\n        event.target.type === 'checkbox'\n          ? event.target.checked\n          : event.target.value\n    })\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    props.onUpdateUser(values.firstName, values.lastName)\n  }\n\n  let loading = null\n  let button = null\n  if (props.response.loading) {\n    loading = (\n      <div>\n        <LinearProgress />\n        <br />\n      </div>\n    )\n  } else {\n    button = (\n      <Button\n        className={classes.saveButton}\n        type=\"submit\"\n        variant=\"contained\"\n      >\n        Save Changes\n      </Button>\n    )\n  }\n\n  let responseMessage = null\n  if (props.response.error) {\n    responseMessage = (\n      <Alert\n        message={props.response.errorMessage}\n        variant=\"error\"\n      />\n    )\n  } else if (props.response.success) {\n    responseMessage = (\n      <Alert\n        message={props.response.successMessage}\n        variant=\"success\"\n      />\n    )\n  }\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      {responseMessage}\n      {loading}\n      <form onSubmit={handleSubmit}>\n        <CardHeader title=\"Profile\" />\n        <Divider />\n        <CardContent>\n          <Grid\n            container\n            spacing={4}\n          >\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                disabled={props.response.loading}\n                fullWidth\n                helperText=\"Please specify the first name\"\n                label=\"First name\"\n                name=\"firstName\"\n                onChange={handleChange}\n                required\n                value={values.firstName}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                disabled={props.response.loading}\n                fullWidth\n                label=\"Last name\"\n                name=\"lastName\"\n                onChange={handleChange}\n                required\n                value={values.lastName}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                disabled\n                fullWidth\n                label=\"Email Address\"\n                name=\"email\"\n                onChange={handleChange}\n                required\n                value={values.email}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                disabled\n                fullWidth\n                label=\"Phone Number\"\n                name=\"phoneNumber\"\n                onChange={handleChange}\n                type=\"text\"\n                value={values.phoneNumber}\n                variant=\"outlined\"\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardActions>\n          {button}\n        </CardActions>\n      </form>\n    </Card>\n  )\n}\n\nGeneralSettings.propTypes = {\n  className: PropTypes.string\n}\n\nconst mapStateToProps = state => {\n  return {\n    user: state.session.user,\n    response: state.session.update\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onUpdateUser: (firstName, lastName) => dispatch(actions.sessionUpdateUserInfo(firstName, lastName))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(GeneralSettings)\n","import React, { useState, useEffect } from 'react'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport { Grid } from '@material-ui/core'\n\nimport axios from 'utils/axios'\nimport { GeneralSettings } from './components'\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}))\n\nconst General = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <Grid\n      {...rest}\n      className={clsx(classes.root, className)}\n      container\n      spacing={3}\n    >\n\n      <Grid\n        item\n      >\n        <GeneralSettings />\n      </Grid>\n    </Grid>\n  )\n}\n\nGeneral.propTypes = {\n  className: PropTypes.string\n}\n\nexport default General\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport { Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}))\n\nconst Header = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Typography\n        component=\"h2\"\n        gutterBottom\n        variant=\"overline\"\n      >\n        Admin Profile\n      </Typography>\n      <Typography\n        component=\"h1\"\n        variant=\"h3\"\n      >\n        {props.title}\n      </Typography>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Header\n","import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Grid,\n  FormControlLabel,\n  Checkbox,\n  Typography,\n  Button,\n  Divider,\n  colors\n} from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  item: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}))\n\nconst Notifications = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Notifications\" />\n      <Divider />\n      <CardContent>\n        <form>\n          <Grid\n            container\n            spacing={6}\n            wrap=\"wrap\"\n          >\n            <Grid\n              className={classes.item}\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <Typography\n                gutterBottom\n                variant=\"h6\"\n              >\n                System\n              </Typography>\n              <Typography\n                gutterBottom\n                variant=\"body2\"\n              >\n                You will recieve emails in your business email address\n              </Typography>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label=\"Email alerts\"\n              />\n              <FormControlLabel\n                control={<Checkbox color=\"primary\" />}\n                label=\"Push Notifications\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label=\"Text message\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label={\n                  <Fragment>\n                    <Typography variant=\"body1\">Phone calls</Typography>\n                    <Typography variant=\"caption\">\n                      Short voice phone updating you\n                    </Typography>\n                  </Fragment>\n                }\n              />\n            </Grid>\n            <Grid\n              className={classes.item}\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <Typography\n                gutterBottom\n                variant=\"h6\"\n              >\n                Chat App\n              </Typography>\n              <Typography\n                gutterBottom\n                variant=\"body2\"\n              >\n                You will recieve emails in your business email address\n              </Typography>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label=\"Email\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label=\"Push notifications\"\n              />\n            </Grid>\n          </Grid>\n        </form>\n      </CardContent>\n      <Divider />\n      <CardActions>\n        <Button\n          className={classes.saveButton}\n          variant=\"contained\"\n        >\n          Save changes\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n\nNotifications.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Notifications\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Grid,\n  Button,\n  Divider,\n  TextField,\n  colors\n} from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}))\n\nconst Security = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  const [values, setValues] = useState({\n    password: '',\n    confirm: ''\n  })\n\n  const handleChange = event => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value\n    })\n  }\n\n  const valid = values.password && values.password === values.confirm\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Change password\" />\n      <Divider />\n      <CardContent>\n        <form>\n          <Grid\n            container\n            spacing={3}\n          >\n            <Grid\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Password\"\n                name=\"password\"\n                onChange={handleChange}\n                type=\"password\"\n                value={values.password}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Confirm password\"\n                name=\"confirm\"\n                onChange={handleChange}\n                type=\"password\"\n                value={values.confirm}\n                variant=\"outlined\"\n              />\n            </Grid>\n          </Grid>\n        </form>\n      </CardContent>\n      <Divider />\n      <CardActions>\n        <Button\n          className={classes.saveButton}\n          disabled={!valid}\n          variant=\"contained\"\n        >\n          Save changes\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n\nSecurity.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Security\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport { Tabs, Tab, Divider, colors } from '@material-ui/core'\n\nimport { Page } from 'components'\nimport {\n  Header,\n  General,\n  Security\n} from './components'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: theme.breakpoints.values.lg,\n    maxWidth: '100%',\n    margin: '0 auto',\n    padding: theme.spacing(3)\n  },\n  tabs: {\n    marginTop: theme.spacing(3)\n  },\n  divider: {\n    backgroundColor: colors.grey[300]\n  },\n  content: {\n    marginTop: theme.spacing(3)\n  }\n}))\n\nconst User = props => {\n  const { match, history } = props\n  const classes = useStyles()\n  const { tab } = match.params\n\n  const handleTabsChange = (event, value) => {\n    history.push(value)\n  }\n\n  const tabs = [\n    { value: 'update', label: 'Update Profile' },\n    { value: 'chnage_password', label: 'Change Password' }\n  ]\n\n  if (!tab) {\n    return <Redirect to=\"/user/profile/update\" />\n  }\n\n  if (!tabs.find(t => t.value === tab)) {\n    return <Redirect to=\"/errors/error-404\" />\n  }\n\n  return (\n    <Page\n      className={classes.root}\n      title={tab === 'update' ? 'Update Profile' : 'Change Password'}\n    >\n      <Header title={tab === 'update' ? 'Update Profile' : 'Change Password'}/>\n      <Tabs\n        className={classes.tabs}\n        onChange={handleTabsChange}\n        scrollButtons=\"auto\"\n        value={tab}\n        variant=\"scrollable\"\n      >\n        {tabs.map(tab => (\n          <Tab\n            key={tab.value}\n            label={tab.label}\n            value={tab.value}\n          />\n        ))}\n      </Tabs>\n      <Divider className={classes.divider} />\n      <div className={classes.content}>\n        {tab === 'update' && <General />}\n        {tab === 'chnage_password' && <Security />}\n\n      </div>\n    </Page>\n  )\n}\n\nUser.propTypes = {\n  history: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired\n}\n\nexport default User\n","import React, { useState, useEffect } from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  Link,\n  Typography\n} from '@material-ui/core'\n\nimport axios from 'utils/axios'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  action: {\n    marginRight: 0,\n    marginTop: 0\n  },\n  overview: {\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    [theme.breakpoints.down('md')]: {\n      flexDirection: 'column-reverse',\n      alignItems: 'flex-start'\n    }\n  },\n  product: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  productImage: {\n    marginRight: theme.spacing(1),\n    height: 48,\n    width: 48\n  },\n  details: {\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    [theme.breakpoints.down('md')]: {\n      flexDirection: 'column',\n      alignItems: 'flex-start'\n    }\n  },\n  notice: {\n    marginTop: theme.spacing(2)\n  }\n}))\n\nconst Subscription = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n  const [subscription, setSubscription] = useState(null)\n\n  useEffect(() => {\n    let mounted = true\n\n    const fetchSubscription = () => {\n      axios.get('/api/account/subscription').then(response => {\n        if (mounted) {\n          setSubscription(response.data.subscription)\n        }\n      })\n    }\n\n    fetchSubscription()\n\n    return () => {\n      mounted = false\n    }\n  }, [])\n\n  if (!subscription) {\n    return null\n  }\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader\n        action={\n          <Button\n            size=\"small\"\n            variant=\"contained\"\n          >\n            Upgrade plan\n          </Button>\n        }\n        classes={{ action: classes.action }}\n        title=\"Manage your subscription\"\n      />\n      <Divider />\n      <CardContent>\n        <Card>\n          <CardContent className={classes.overview}>\n            <div>\n              <Typography\n                display=\"inline\"\n                variant=\"h4\"\n              >\n                {subscription.currency}\n                {subscription.price}\n              </Typography>\n              <Typography\n                display=\"inline\"\n                variant=\"subtitle1\"\n              >\n                /mo\n              </Typography>\n            </div>\n            <div className={classes.product}>\n              <img\n                alt=\"Product\"\n                className={classes.productImage}\n                src=\"/images/products/product_freelancer.svg\"\n              />\n              <Typography variant=\"overline\">{subscription.name}</Typography>\n            </div>\n          </CardContent>\n          <Divider />\n          <CardContent className={classes.details}>\n            <div>\n              <Typography variant=\"body1\">\n                {subscription.proposalsLeft} proposals left\n              </Typography>\n              <Typography variant=\"body1\">\n                {subscription.templatesLeft} templates\n              </Typography>\n            </div>\n            <div>\n              <Typography variant=\"body1\">\n                {subscription.invitesLeft} invites left\n              </Typography>\n              <Typography variant=\"body1\">\n                {subscription.adsLeft} ads left\n              </Typography>\n            </div>\n            <div>\n              {subscription.hasAnalytics && (\n                <Typography variant=\"body1\">Analytics dashboard</Typography>\n              )}\n              {subscription.hasEmailAlerts && (\n                <Typography variant=\"body1\">Email alerts</Typography>\n              )}\n            </div>\n          </CardContent>\n          <Divider />\n        </Card>\n        <Typography\n          className={classes.notice}\n          variant=\"body2\"\n        >\n          The refunds don't work once you have the subscription, but you can\n          always{' '}\n          <Link\n            color=\"secondary\"\n            component={RouterLink}\n            to=\"#\"\n          >\n            Cancel your subscription\n          </Link>\n          .\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nSubscription.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Subscription\n","export { default } from './User'\n","import React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"\n}), 'CheckBoxOutlineBlank');","import React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckBox');","import React from 'react';\nimport createSvgIcon from './createSvgIcon';\n/**\n * @ignore - internal component.\n */\n\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z\"\n}), 'IndeterminateCheckBox');","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@material-ui/utils';\nimport SwitchBase from '../internal/SwitchBase';\nimport CheckBoxOutlineBlankIcon from '../internal/svg-icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '../internal/svg-icons/CheckBox';\nimport { fade } from '../styles/colorManipulator';\nimport IndeterminateCheckBoxIcon from '../internal/svg-icons/IndeterminateCheckBox';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      color: theme.palette.text.secondary\n    },\n\n    /* Pseudo-class applied to the root element if `checked={true}`. */\n    checked: {},\n\n    /* Pseudo-class applied to the root element if `disabled={true}`. */\n    disabled: {},\n\n    /* Pseudo-class applied to the root element if `indeterminate={true}`. */\n    indeterminate: {},\n\n    /* Styles applied to the root element if `color=\"primary\"`. */\n    colorPrimary: {\n      '&$checked': {\n        color: theme.palette.primary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    },\n\n    /* Styles applied to the root element if `color=\"secondary\"`. */\n    colorSecondary: {\n      '&$checked': {\n        color: theme.palette.secondary.main,\n        '&:hover': {\n          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n          // Reset on touch devices, it doesn't add specificity\n          '@media (hover: none)': {\n            backgroundColor: 'transparent'\n          }\n        }\n      },\n      '&$disabled': {\n        color: theme.palette.action.disabled\n      }\n    }\n  };\n};\nvar defaultCheckedIcon = React.createElement(CheckBoxIcon, null);\nvar defaultIcon = React.createElement(CheckBoxOutlineBlankIcon, null);\nvar defaultIndeterminateIcon = React.createElement(IndeterminateCheckBoxIcon, null);\nvar Checkbox = React.forwardRef(function Checkbox(props, ref) {\n  var _props$checkedIcon = props.checkedIcon,\n      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,\n      classes = props.classes,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'secondary' : _props$color,\n      _props$icon = props.icon,\n      icon = _props$icon === void 0 ? defaultIcon : _props$icon,\n      _props$indeterminate = props.indeterminate,\n      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,\n      _props$indeterminateI = props.indeterminateIcon,\n      indeterminateIcon = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,\n      inputProps = props.inputProps,\n      other = _objectWithoutProperties(props, [\"checkedIcon\", \"classes\", \"color\", \"icon\", \"indeterminate\", \"indeterminateIcon\", \"inputProps\"]);\n\n  return React.createElement(SwitchBase, _extends({\n    type: \"checkbox\",\n    checkedIcon: indeterminate ? indeterminateIcon : checkedIcon,\n    classes: {\n      root: clsx(classes.root, classes[\"color\".concat(capitalize(color))], indeterminate && classes.indeterminate),\n      checked: classes.checked,\n      disabled: classes.disabled\n    },\n    color: color,\n    inputProps: _extends({\n      'data-indeterminate': indeterminate\n    }, inputProps),\n    icon: indeterminate ? indeterminateIcon : icon,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Checkbox.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is checked.\n   */\n  checkedIcon: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   */\n  color: PropTypes.oneOf(['primary', 'secondary', 'default']),\n\n  /**\n   * If `true`, the switch will be disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect will be disabled.\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is unchecked.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n\n  /**\n   * If `true`, the component appears indeterminate.\n   * This does not set the native input element to indeterminate due\n   * to inconsistent behavior across browsers.\n   * However, we set a `data-indeterminate` attribute on the input.\n   */\n  indeterminate: PropTypes.bool,\n\n  /**\n   * The icon to display when the component is indeterminate.\n   */\n  indeterminateIcon: PropTypes.node,\n\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * If `true`, the `input` element will be required.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The input component prop `type`.\n   */\n  type: PropTypes.string,\n\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCheckbox'\n})(Checkbox);"],"sourceRoot":""}