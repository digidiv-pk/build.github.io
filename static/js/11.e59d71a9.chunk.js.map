{"version":3,"sources":["templates/Settings/components/General/components/ProfileDetails/ProfileDetails.js","templates/Settings/components/General/components/SuccessSnackbar/SuccessSnackbar.js","templates/Settings/components/General/components/GeneralSettings/GeneralSettings.js","templates/Settings/components/General/General.js","templates/Settings/components/Header/Header.js","templates/Settings/components/Notifications/Notifications.js","templates/Settings/components/Security/Security.js","templates/Settings/components/Subscription/Subscription.js","templates/Settings/Settings.js","templates/Settings/index.js"],"names":["makeStyles","theme","root","content","display","alignItems","flexDirection","textAlgin","name","marginTop","spacing","avatar","height","width","removeBotton","useStyles","backgroundColor","colors","green","message","icon","marginRight","SuccessSnackbar","props","open","onClose","classes","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","SnackbarContent","className","variant","defaultProps","saveButton","color","palette","white","GeneralSettings","profile","rest","useState","openSnackbar","setOpenSnackbar","firstName","lastName","email","phone","state","country","isPublic","canHire","values","setValues","handleChange","event","persist","target","type","checked","value","Card","clsx","onSubmit","preventDefault","CardHeader","title","Divider","CardContent","Grid","container","item","md","xs","TextField","fullWidth","helperText","label","onChange","required","select","SelectProps","native","map","key","Typography","Switch","edge","CardActions","Button","General","setProfile","useEffect","mounted","axios","get","then","response","data","Header","component","gutterBottom","Notifications","wrap","sm","FormControlLabel","control","Checkbox","defaultChecked","Security","password","confirm","valid","disabled","action","overview","flexWrap","justifyContent","breakpoints","down","product","productImage","details","notice","Subscription","subscription","setSubscription","size","currency","price","alt","src","proposalsLeft","templatesLeft","invitesLeft","adsLeft","hasAnalytics","hasEmailAlerts","Link","RouterLink","to","lg","maxWidth","margin","padding","tabs","divider","grey","Settings","match","history","tab","params","find","t","Tabs","push","scrollButtons","Tab"],"mappings":"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","file":"static/js/11.e59d71a9.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Card,\n  CardContent,\n  CardActions,\n  Avatar,\n  Typography,\n  Button\n} from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  content: {\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    textAlgin: 'center'\n  },\n  name: {\n    marginTop: theme.spacing(1)\n  },\n  avatar: {\n    height: 100,\n    width: 100\n  },\n  removeBotton: {\n    width: '100%'\n  }\n}))\n\nconst ProfileDetails = props => {\n  const { profile, className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardContent className={classes.content}>\n        <Avatar\n          className={classes.avatar}\n          src={profile.avatar}\n        />\n        <Typography\n          className={classes.name}\n          gutterBottom\n          variant=\"h3\"\n        >\n          {profile.firstName} {profile.lastName}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          variant=\"body1\"\n        >\n          {profile.state}, {profile.country}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          variant=\"body2\"\n        >\n          {profile.timezone}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button\n          className={classes.removeBotton}\n          variant=\"text\"\n        >\n          Remove picture\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n\nProfileDetails.propTypes = {\n  className: PropTypes.string,\n  profile: PropTypes.object.isRequired\n}\n\nexport default ProfileDetails\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport { Snackbar, SnackbarContent, colors } from '@material-ui/core'\nimport CheckCircleIcon from '@material-ui/icons/CheckCircleOutlined'\n\nconst useStyles = makeStyles(theme => ({\n  content: {\n    backgroundColor: colors.green[600]\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  icon: {\n    marginRight: theme.spacing(2)\n  }\n}))\n\nconst SuccessSnackbar = props => {\n  const { open, onClose } = props\n\n  const classes = useStyles()\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'top',\n        horizontal: 'center'\n      }}\n      autoHideDuration={6000}\n      onClose={onClose}\n      open={open}\n    >\n      <SnackbarContent\n        className={classes.content}\n        message={\n          <span className={classes.message}>\n            <CheckCircleIcon className={classes.icon} />\n            Successfully saved changes!\n          </span>\n        }\n        variant=\"h6\"\n      />\n    </Snackbar>\n  )\n}\n\nSuccessSnackbar.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired\n}\n\nSuccessSnackbar.defaultProps = {\n  open: true,\n  onClose: () => {}\n}\n\nexport default SuccessSnackbar\n","import React, { useState } from 'react'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  Grid,\n  Divider,\n  Switch,\n  TextField,\n  Typography,\n  colors\n} from '@material-ui/core'\n\nimport SuccessSnackbar from '../SuccessSnackbar'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}))\n\nconst GeneralSettings = props => {\n  const { profile, className, ...rest } = props\n\n  const classes = useStyles()\n  const [openSnackbar, setOpenSnackbar] = useState(false)\n  const [values, setValues] = useState({\n    firstName: profile.firstName,\n    lastName: profile.lastName,\n    email: profile.email,\n    phone: profile.phone,\n    state: profile.state,\n    country: profile.country,\n    isPublic: profile.isPublic,\n    canHire: profile.canHire\n  })\n\n  const handleChange = event => {\n    event.persist()\n\n    setValues({\n      ...values,\n      [event.target.name]:\n        event.target.type === 'checkbox'\n          ? event.target.checked\n          : event.target.value\n    })\n  }\n\n  const handleSubmit = event => {\n    event.preventDefault()\n    setOpenSnackbar(true)\n  }\n\n  const handleSnackbarClose = () => {\n    setOpenSnackbar(false)\n  }\n\n  const states = ['Alabama', 'New York', 'San Francisco']\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <form onSubmit={handleSubmit}>\n        <CardHeader title=\"Profile\" />\n        <Divider />\n        <CardContent>\n          <Grid\n            container\n            spacing={4}\n          >\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                helperText=\"Please specify the first name\"\n                label=\"First name\"\n                name=\"firstName\"\n                onChange={handleChange}\n                required\n                value={values.firstName}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Last name\"\n                name=\"lastName\"\n                onChange={handleChange}\n                required\n                value={values.lastName}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Email Address\"\n                name=\"email\"\n                onChange={handleChange}\n                required\n                value={values.email}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Phone Number\"\n                name=\"phone\"\n                onChange={handleChange}\n                type=\"text\"\n                value={values.phone}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Select State\"\n                name=\"state\"\n                onChange={handleChange}\n                select\n                // eslint-disable-next-line react/jsx-sort-props\n                SelectProps={{ native: true }}\n                value={values.state}\n                variant=\"outlined\"\n              >\n                {states.map(state => (\n                  <option\n                    key={state}\n                    value={state}\n                  >\n                    {state}\n                  </option>\n                ))}\n              </TextField>\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Country\"\n                name=\"country\"\n                onChange={handleChange}\n                required\n                value={values.country}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <Typography variant=\"h6\">Make Contact Info Public</Typography>\n              <Typography variant=\"body2\">\n                Means that anyone viewing your profile will be able to see your\n                contacts details\n              </Typography>\n              <Switch\n                checked={values.isPublic}\n                color=\"secondary\"\n                edge=\"start\"\n                name=\"isPublic\"\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid\n              item\n              md={6}\n              xs={12}\n            >\n              <Typography variant=\"h6\">Available to hire</Typography>\n              <Typography variant=\"body2\">\n                Toggling this will let your teamates know that you are available\n                for acquireing new projects\n              </Typography>\n              <Switch\n                checked={values.canHire}\n                color=\"secondary\"\n                edge=\"start\"\n                name=\"canHire\"\n                onChange={handleChange}\n              />\n            </Grid>\n          </Grid>\n        </CardContent>\n        <Divider />\n        <CardActions>\n          <Button\n            className={classes.saveButton}\n            type=\"submit\"\n            variant=\"contained\"\n          >\n            Save Changes\n          </Button>\n        </CardActions>\n      </form>\n      <SuccessSnackbar\n        onClose={handleSnackbarClose}\n        open={openSnackbar}\n      />\n    </Card>\n  )\n}\n\nGeneralSettings.propTypes = {\n  className: PropTypes.string,\n  profile: PropTypes.object.isRequired\n}\n\nexport default GeneralSettings\n","import React, { useState, useEffect } from 'react'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport { Grid } from '@material-ui/core'\n\nimport axios from 'utils/axios'\nimport { GeneralSettings } from './components'\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}))\n\nconst General = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n  const [profile, setProfile] = useState(null)\n\n  useEffect(() => {\n    let mounted = true\n\n    const fetchProfile = () => {\n      axios.get('/api/account/profile').then(response => {\n        if (mounted) {\n          setProfile(response.data.profile)\n        }\n      })\n    }\n\n    fetchProfile()\n\n    return () => {\n      mounted = false\n    }\n  }, [])\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Grid\n      {...rest}\n      className={clsx(classes.root, className)}\n      container\n      spacing={3}\n    >\n\n      <Grid\n        item\n      >\n        <GeneralSettings profile={profile} />\n      </Grid>\n    </Grid>\n  )\n}\n\nGeneral.propTypes = {\n  className: PropTypes.string\n}\n\nexport default General\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport { Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}))\n\nconst Header = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <div\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <Typography\n        component=\"h2\"\n        gutterBottom\n        variant=\"overline\"\n      >\n        Settings\n      </Typography>\n      <Typography\n        component=\"h1\"\n        variant=\"h3\"\n      >\n        Change account information\n      </Typography>\n    </div>\n  )\n}\n\nHeader.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Header\n","import React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Grid,\n  FormControlLabel,\n  Checkbox,\n  Typography,\n  Button,\n  Divider,\n  colors\n} from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  item: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}))\n\nconst Notifications = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Notifications\" />\n      <Divider />\n      <CardContent>\n        <form>\n          <Grid\n            container\n            spacing={6}\n            wrap=\"wrap\"\n          >\n            <Grid\n              className={classes.item}\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <Typography\n                gutterBottom\n                variant=\"h6\"\n              >\n                System\n              </Typography>\n              <Typography\n                gutterBottom\n                variant=\"body2\"\n              >\n                You will recieve emails in your business email address\n              </Typography>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label=\"Email alerts\"\n              />\n              <FormControlLabel\n                control={<Checkbox color=\"primary\" />}\n                label=\"Push Notifications\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label=\"Text message\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label={\n                  <Fragment>\n                    <Typography variant=\"body1\">Phone calls</Typography>\n                    <Typography variant=\"caption\">\n                      Short voice phone updating you\n                    </Typography>\n                  </Fragment>\n                }\n              />\n            </Grid>\n            <Grid\n              className={classes.item}\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <Typography\n                gutterBottom\n                variant=\"h6\"\n              >\n                Chat App\n              </Typography>\n              <Typography\n                gutterBottom\n                variant=\"body2\"\n              >\n                You will recieve emails in your business email address\n              </Typography>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label=\"Email\"\n              />\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    color=\"primary\"\n                    defaultChecked //\n                  />\n                }\n                label=\"Push notifications\"\n              />\n            </Grid>\n          </Grid>\n        </form>\n      </CardContent>\n      <Divider />\n      <CardActions>\n        <Button\n          className={classes.saveButton}\n          variant=\"contained\"\n        >\n          Save changes\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n\nNotifications.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Notifications\n","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport clsx from 'clsx'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  Grid,\n  Button,\n  Divider,\n  TextField,\n  colors\n} from '@material-ui/core'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  saveButton: {\n    color: theme.palette.white,\n    backgroundColor: colors.green[600],\n    '&:hover': {\n      backgroundColor: colors.green[900]\n    }\n  }\n}))\n\nconst Security = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n\n  const [values, setValues] = useState({\n    password: '',\n    confirm: ''\n  })\n\n  const handleChange = event => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value\n    })\n  }\n\n  const valid = values.password && values.password === values.confirm\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader title=\"Change password\" />\n      <Divider />\n      <CardContent>\n        <form>\n          <Grid\n            container\n            spacing={3}\n          >\n            <Grid\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Security\"\n                name=\"password\"\n                onChange={handleChange}\n                type=\"password\"\n                value={values.password}\n                variant=\"outlined\"\n              />\n            </Grid>\n            <Grid\n              item\n              md={4}\n              sm={6}\n              xs={12}\n            >\n              <TextField\n                fullWidth\n                label=\"Confirm password\"\n                name=\"confirm\"\n                onChange={handleChange}\n                type=\"password\"\n                value={values.confirm}\n                variant=\"outlined\"\n              />\n            </Grid>\n          </Grid>\n        </form>\n      </CardContent>\n      <Divider />\n      <CardActions>\n        <Button\n          className={classes.saveButton}\n          disabled={!valid}\n          variant=\"contained\"\n        >\n          Save changes\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n\nSecurity.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Security\n","import React, { useState, useEffect } from 'react'\nimport { Link as RouterLink } from 'react-router-dom'\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Divider,\n  Link,\n  Typography\n} from '@material-ui/core'\n\nimport axios from 'utils/axios'\n\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  action: {\n    marginRight: 0,\n    marginTop: 0\n  },\n  overview: {\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    [theme.breakpoints.down('md')]: {\n      flexDirection: 'column-reverse',\n      alignItems: 'flex-start'\n    }\n  },\n  product: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  productImage: {\n    marginRight: theme.spacing(1),\n    height: 48,\n    width: 48\n  },\n  details: {\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between',\n    [theme.breakpoints.down('md')]: {\n      flexDirection: 'column',\n      alignItems: 'flex-start'\n    }\n  },\n  notice: {\n    marginTop: theme.spacing(2)\n  }\n}))\n\nconst Subscription = props => {\n  const { className, ...rest } = props\n\n  const classes = useStyles()\n  const [subscription, setSubscription] = useState(null)\n\n  useEffect(() => {\n    let mounted = true\n\n    const fetchSubscription = () => {\n      axios.get('/api/account/subscription').then(response => {\n        if (mounted) {\n          setSubscription(response.data.subscription)\n        }\n      })\n    }\n\n    fetchSubscription()\n\n    return () => {\n      mounted = false\n    }\n  }, [])\n\n  if (!subscription) {\n    return null\n  }\n\n  return (\n    <Card\n      {...rest}\n      className={clsx(classes.root, className)}\n    >\n      <CardHeader\n        action={\n          <Button\n            size=\"small\"\n            variant=\"contained\"\n          >\n            Upgrade plan\n          </Button>\n        }\n        classes={{ action: classes.action }}\n        title=\"Manage your subscription\"\n      />\n      <Divider />\n      <CardContent>\n        <Card>\n          <CardContent className={classes.overview}>\n            <div>\n              <Typography\n                display=\"inline\"\n                variant=\"h4\"\n              >\n                {subscription.currency}\n                {subscription.price}\n              </Typography>\n              <Typography\n                display=\"inline\"\n                variant=\"subtitle1\"\n              >\n                /mo\n              </Typography>\n            </div>\n            <div className={classes.product}>\n              <img\n                alt=\"Product\"\n                className={classes.productImage}\n                src=\"/images/products/product_freelancer.svg\"\n              />\n              <Typography variant=\"overline\">{subscription.name}</Typography>\n            </div>\n          </CardContent>\n          <Divider />\n          <CardContent className={classes.details}>\n            <div>\n              <Typography variant=\"body1\">\n                {subscription.proposalsLeft} proposals left\n              </Typography>\n              <Typography variant=\"body1\">\n                {subscription.templatesLeft} templates\n              </Typography>\n            </div>\n            <div>\n              <Typography variant=\"body1\">\n                {subscription.invitesLeft} invites left\n              </Typography>\n              <Typography variant=\"body1\">\n                {subscription.adsLeft} ads left\n              </Typography>\n            </div>\n            <div>\n              {subscription.hasAnalytics && (\n                <Typography variant=\"body1\">Analytics dashboard</Typography>\n              )}\n              {subscription.hasEmailAlerts && (\n                <Typography variant=\"body1\">Email alerts</Typography>\n              )}\n            </div>\n          </CardContent>\n          <Divider />\n        </Card>\n        <Typography\n          className={classes.notice}\n          variant=\"body2\"\n        >\n          The refunds don't work once you have the subscription, but you can\n          always{' '}\n          <Link\n            color=\"secondary\"\n            component={RouterLink}\n            to=\"#\"\n          >\n            Cancel your subscription\n          </Link>\n          .\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n}\n\nSubscription.propTypes = {\n  className: PropTypes.string\n}\n\nexport default Subscription\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/styles'\nimport { Tabs, Tab, Divider, colors } from '@material-ui/core'\n\nimport { Page } from 'components'\nimport {\n  Header,\n  General,\n  Subscription,\n  Notifications,\n  Security\n} from './components'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: theme.breakpoints.values.lg,\n    maxWidth: '100%',\n    margin: '0 auto',\n    padding: theme.spacing(3)\n  },\n  tabs: {\n    marginTop: theme.spacing(3)\n  },\n  divider: {\n    backgroundColor: colors.grey[300]\n  },\n  content: {\n    marginTop: theme.spacing(3)\n  }\n}))\n\nconst Settings = props => {\n  const { match, history } = props\n  const classes = useStyles()\n  const { tab } = match.params\n\n  const handleTabsChange = (event, value) => {\n    history.push(value)\n  }\n\n  const tabs = [\n    { value: 'general', label: 'General' },\n    { value: 'subscription', label: 'Subscription' },\n    { value: 'notifications', label: 'Notifications' },\n    { value: 'security', label: 'Security' }\n  ]\n\n  if (!tab) {\n    return <Redirect to=\"/settings/general\" />\n  }\n\n  if (!tabs.find(t => t.value === tab)) {\n    return <Redirect to=\"/errors/error-404\" />\n  }\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Settings\"\n    >\n      <Header />\n      <Tabs\n        className={classes.tabs}\n        onChange={handleTabsChange}\n        scrollButtons=\"auto\"\n        value={tab}\n        variant=\"scrollable\"\n      >\n        {tabs.map(tab => (\n          <Tab\n            key={tab.value}\n            label={tab.label}\n            value={tab.value}\n          />\n        ))}\n      </Tabs>\n      <Divider className={classes.divider} />\n      <div className={classes.content}>\n        {tab === 'general' && <General />}\n        {tab === 'subscription' && <Subscription />}\n        {tab === 'notifications' && <Notifications />}\n        {tab === 'security' && <Security />}\n      </div>\n    </Page>\n  )\n}\n\nSettings.propTypes = {\n  history: PropTypes.object.isRequired,\n  match: PropTypes.object.isRequired\n}\n\nexport default Settings\n","export { default } from './Settings'\n"],"sourceRoot":""}